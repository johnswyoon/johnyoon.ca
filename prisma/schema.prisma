generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  image    String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  emailVerified      DateTime?
  comments  Comment[]
  accounts  Account[]
  sessions  Session[]

  @@map(name: "users")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  thumbnail String?
  published Boolean   @default(false)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  comments  Comment[]
  tags      Tag[]

  @@map(name: "posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now()) @map(name: "created_at")

  postId String @unique
  post   Post   @relation(fields: [postId], references: [id])

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  @@map(name: "comments")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]

  @@map(name: "tags")
}

model Album {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  photos    Photo[]

  @@map(name: "albums")
}

model Photo {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  albums    Album[]

  @@map(name: "photos")
}
